@page "/product/{id:int}"
@inject IProductService ProductService

@if (product == null)
{
    <span>@Message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper nr-2">
            <img class="media-img" src="@product.ImageUrl" atl="@product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>

            @if (product.Variants != null && product.Variants.Count > 1)
           {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                            @foreach (var variant in product.Variants)
                           {
                               <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                           }
                    </select>
                </div>
           }
            @if (GetSelectedVariant() != null)
            {
               @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
               {
                   <h6 class="text-muted original-price">
                       €@GetSelectedVariant().OriginalPrice
                   </h6>
               }
               <h4 class="price">
                    €@GetSelectedVariant().Price
               </h4>
           }            

        </div>
    </div>
}

@code {

    private Product? product = null; //The current product
    private string Message = string.Empty;
    private int currentTypeId = 1; // to let the user hoose product

    [Parameter]
    public int Id { get; set; } //The intiger id uses parameter

    //sets the parameter Id
    protected override async Task OnParametersSetAsync()
    {
        Message = "Loading Product..";
        //where the product id ecuals the given id
        var result = await ProductService.GetProductAsync(Id);
        if (!result.Success)
        {
            Message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId; 
            }
        }        
    }

    //method to select variant
    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }
}
