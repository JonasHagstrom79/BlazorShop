@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
   <div>
       @foreach (var product in cartProducts)
      {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">@product.Title</a>
                    </h5>
                    <span>@product.ProductType</span>
                    <input type="number" value="@product.Quantity"
                        @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" @*send itemid into the method*@ @*only bind the event, not the value*@
                        class="form-control input-quantity" @*first form control provided by bootstrap, then own css*@
                        min="1"/>
                    <br/>
                    <button class="btn-delete" @onclick="@(() => 
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete
                    </button>
                </div>
                <div class="cart-product-price">
                    €@(product.Price * product.Quantity)
                </div>
            </div>
      }
      <div class="cart-product-price">
        Total (@cartProducts.Count): €@cartProducts.Sum(product => @product.Price * product.Quantity) @*for each product we take the product price*@
      </div>
   </div> 
}

@code {
    List<CartProductResponseDto> cartProducts = null;
    string message = "Loading cart....";

    //On initialization check for cart items, if so make webservice call to get the products
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    //reload our complete cart
    private async Task LoadCart()
    {
        if((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponseDto>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());//sets the value from the input
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }
}
